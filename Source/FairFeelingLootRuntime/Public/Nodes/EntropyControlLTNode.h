// Copyright 2021 Skyler Clark. All Rights Reserved.

#pragma once

#include "CoreMinimal.h"
#include "LootTable.h"
#include "LootTableDefinition.h"

#include "EntropyControlLTNode.generated.h"

// Normally the random stream and time is tracked at the Loot Table Component global level.
// By inserting this node, you are able to create sub-sections of a Loot Table Definition which
// track their own time or have their own random stream (useful for for debugging).
UCLASS()
class FAIRFEELINGLOOTRUNTIME_API UEntropyControlLTNode : public ULTGraphNode
{
	GENERATED_BODY()
public:
	UEntropyControlLTNode();

	// Should children of this node use a random stream generated by this node?
	UPROPERTY(EditDefaultsOnly, Category = "Random")
	bool bTracksOwnRandomStream = true;

	// If true, ignore InitialSeed and randomize the seed for the random number stream
	UPROPERTY(EditDefaultsOnly, Category = "Random", meta = (EditCondition = "bTracksOwnRandomStream"))
	bool bShouldRandomizeSeed = false;

	// If not randomizing the seed, this is what will be used to initialize the random number stream
	UPROPERTY(EditDefaultsOnly, Category = "Random", meta = (EditCondition = "bTracksOwnRandomStream && !bShouldRandomizeSeed"))
	float InitialSeed = 0;
	
	// Should children of this node track time from the graph-scope or from this node?
	UPROPERTY(EditDefaultsOnly, Category = "Time")
	bool bTracksOwnTime = true;

	virtual const ULTGraphNode* TraverseNodesAndCollectLoot(FLootTableData &LootTable, const FEntropyState &State, TArray<FLootRecipe> &Loot) const override;
	virtual bool ShouldPickChildren() const override { return false; }

#if WITH_EDITOR
	virtual FLinearColor GetBackgroundColor() const override;
	virtual const FSlateBrush* GetNodeIcon() const override;
	virtual bool SupportsImplicitSequence() const override { return true; }
#endif
};
